[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.copy]
target = "main.lua"
position = "append"
sources = [
	"talisman.lua"
]

# Show a Gold Seal to confirm Talisman is Active
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "replace_card.states.visible = false"
position = "before"
payload = "replace_card:set_seal('Gold', true, true)"
match_indent = true

[[patches]]
[patches.module]
source = "nativefs.lua"
before = "main.lua"
name = "nativefs"

# Use formatted numbers for poker hand scores
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "{n=G.UIT.T, config={text = G.GAME.hands[handname].chips, scale = 0.45, colour = G.C.UI.TEXT_LIGHT}},"
position = "at"
payload = "{n=G.UIT.T, config={text = number_format(G.GAME.hands[handname].chips, 1000000), scale = 0.45, colour = G.C.UI.TEXT_LIGHT}},"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "{n=G.UIT.T, config={text = G.GAME.hands[handname].mult, scale = 0.45, colour = G.C.UI.TEXT_LIGHT}}"
position = "at"
payload = "{n=G.UIT.T, config={text = number_format(G.GAME.hands[handname].mult, 1000000), scale = 0.45, colour = G.C.UI.TEXT_LIGHT}}"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "if not G.TAROT_INTERRUPT_PULSE then G.FUNCS.text_super_juice(e, math.max(0,math.floor(math.log10(type(G.GAME.current_round.current_hand.mult) == 'number' and G.GAME.current_round.current_hand.mult or 1)))) end"
position = "at"
payload = '''
local num = 0
if to_big(is_number(G.GAME.current_round.current_hand.mult) and G.GAME.current_round.current_hand.mult or 1) > BigC.BIG then
	num = math.min(2,math.max(0,math.floor(math.log10(is_number(G.GAME.current_round.current_hand.mult) and G.GAME.current_round.current_hand.mult or 1))))
else
	num = 1e300
end
if not G.TAROT_INTERRUPT_PULSE then G.FUNCS.text_super_juice(e, num) end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "if not G.TAROT_INTERRUPT_PULSE then G.FUNCS.text_super_juice(e, math.max(0,math.floor(math.log10(type(G.GAME.current_round.current_hand.chips) == 'number' and G.GAME.current_round.current_hand.chips or 1)))) end"
position = "at"
payload = '''
local num = 0
if to_big(is_number(G.GAME.current_round.current_hand.chips) and G.GAME.current_round.current_hand.chips or 1) > BigC.BIG then
	num = math.min(2,math.max(0,math.floor(math.log10(is_number(G.GAME.current_round.current_hand.chips) and G.GAME.current_round.current_hand.chips or 1))))
else
	num = 1e300
end
if not G.TAROT_INTERRUPT_PULSE then G.FUNCS.text_super_juice(e, num) end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "if type(G.GAME.current_round.current_hand.chips) ~= 'number' or type(G.GAME.current_round.current_hand.mult) ~= 'number' then"
position = "at"
payload = "if not is_number(G.GAME.current_round.current_hand.chips) or not is_number(G.GAME.current_round.current_hand.mult) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "main.lua"
pattern = "if type(G.GAME.current_round.current_hand.chips) ~= 'number' or type(G.GAME.current_round.current_hand.mult) ~= 'number' then"
position = "at"
payload = "if not is_number(G.GAME.current_round.current_hand.chips) or not is_number(G.GAME.current_round.current_hand.mult) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local delta = (type(vals[name]) == 'number' and type(G.GAME.current_round.current_hand[name]) == 'number') and (vals[name] - G.GAME.current_round.current_hand[name]) or 0"
position = "at"
payload = "local delta = (is_number(vals[name]) and is_number(G.GAME.current_round.current_hand[name])) and (vals[name] - G.GAME.current_round.current_hand[name]) or 0"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local delta = (type(vals.chips) == 'number' and type(G.GAME.current_round.current_hand.chips) == 'number') and (vals.chips - G.GAME.current_round.current_hand.chips) or 0"
position = "at"
payload = "local delta = (is_number(vals.chips) and is_number(G.GAME.current_round.current_hand.chips)) and (vals.chips - G.GAME.current_round.current_hand.chips) or 0"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local delta = (type(vals.mult) == 'number' and type(G.GAME.current_round.current_hand.mult) == 'number')and (vals.mult - G.GAME.current_round.current_hand.mult) or 0"
position = "at"
payload = "local delta = (is_number(vals.mult) and is_number(G.GAME.current_round.current_hand.mult))and (vals.mult - G.GAME.current_round.current_hand.mult) or 0"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if delta < 0 then delta = ''..delta; col = G.C.RED"
position = "at"
payload = "if to_big(delta) < BigC.ZERO then delta = number_format(delta); col = G.C.RED"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif delta > 0 then delta = '+'..delta"
position = "at"
payload = "elseif to_big(delta) > BigC.ZERO then delta = '+'..number_format(delta)"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "else delta = ''..delta"
position = "at"
payload = "else delta = number_format(delta)"
match_indent = true

[[patches]]
[patches.pattern]
target = "engine/string_packer.lua"
pattern = 'if type_v == "table" then'
position = "after"
payload = '''
if v.array and v.sign then
	local v0 = "to_big({"
	for i, v in pairs(v.array) do
		v0 = v0 .. ("["..i.."] = "..(v or 0)) .. ", "
	end
	v0 = v0 .. "},"..v.sign..")"
	v = v0
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "engine/string_packer.lua"
pattern = 'if v.is and v:is(Object) then'
position = "at"
payload = 'elseif v.is and v:is(Object) then'
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "{n=G.UIT.O, config={object = DynaText({string = {{ref_table = G.GAME.round_resets, ref_value = 'ante'}}, colours = {G.C.IMPORTANT},shadow = true, font = G.LANGUAGES['en-us'].font, scale = 2*scale}),id = 'ante_UI_count'}},"
position = "at"
payload = "{n=G.UIT.O, config={object = DynaText({string = {{ref_table = G.GAME.round_resets, ref_value = 'ante_disp'}}, colours = {G.C.IMPORTANT},shadow = true, font = G.LANGUAGES['en-us'].font, scale = scale_number(G.GAME.round_resets.ante, 2*scale, 100)}),id = 'ante_UI_count'}},--{n=G.UIT.T, config={text = number_format(G.GAME.round_resets.ante), lang = G.LANGUAGES['en-us'], scale = scale_number(G.GAME.round_resets.ante, 2*scale, 100), colour = G.C.IMPORTANT, shadow = true,id = 'ante_UI_count'}},"
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "ante = 1,"
position = "after"
payload = "ante_disp = number_format(1),"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "G.GAME.round_resets.ante = G.GAME.round_resets.ante + mod"
position = "after"
payload = "G.GAME.round_resets.ante_disp = number_format(G.GAME.round_resets.ante)"
match_indent = true

[[patches]]
[patches.pattern]
target = "engine/ui.lua"
pattern = "if self.config.vert then love.graphics.translate(0,self.VT.h); love.graphics.rotate(-math.pi/2) end"
position = "before"
payload = '''
if Big and G.STATE == G.STATES.MENU then self.config.scale = to_number(self.config.scale) end
'''
match_indent = true

# poker hand level fixes
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "{n=G.UIT.T, config={text = localize('k_level_prefix')..G.GAME.hands[handname].level, scale = 0.5, colour = G.C.UI.TEXT_DARK}}"
position = "at"
payload = "{n=G.UIT.T, config={text = localize('k_level_prefix')..number_format(G.GAME.hands[handname].level), scale = 0.5, colour = G.C.UI.TEXT_DARK}}"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if type(vals.level) == 'number' then"
position = "at"
payload = "if is_number(vals.level) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '{n=G.UIT.C, config={align = "cm", padding = 0.01, r = 0.1, colour = G.C.HAND_LEVELS[math.min(7, G.GAME.hands[handname].level)], minw = 1.5, outline = 0.8, outline_colour = G.C.WHITE}, nodes={'
position = "at"
payload = '{n=G.UIT.C, config={align = "cm", padding = 0.01, r = 0.1, colour = G.C.HAND_LEVELS[math.floor(to_number(math.min(7, G.GAME.hands[handname].level)))], minw = 1.5, outline = 0.8, outline_colour = G.C.WHITE}, nodes={'
match_indent = true

# Luxury Tax Challenge
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''self:change_size(self.config.last_poll_size - math.floor(G.GAME.dollars/G.GAME.modifiers.minus_hand_size_per_X_dollar))'''
position = "at"
payload = '''self:change_size(to_number(self.config.last_poll_size - math.floor(G.GAME.dollars/G.GAME.modifiers.minus_hand_size_per_X_dollar)))'''
match_indent = true

# for now, I'm letting dollar eval ignore bignum, I'll patch it later
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if num_dollars > 60 then"
position = "at"
payload = '''num_dollars = to_number(num_dollars); if math.abs(to_number(num_dollars)) > 60 then'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if num_dollars > 60 or num_dollars < -60 then"
position = "at"
payload = '''num_dollars = to_number(num_dollars); if math.abs(to_number(num_dollars)) > 60 then'''
match_indent = true

# call init game object appendum after init game object
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "if new_game_obj then self.GAME = self:init_game_object() end"
position = "after"
payload =  "if Talisman and Talisman.igo then self.GAME = Talisman.igo(self.GAME) end"
match_indent = true

# call init game object appendum after init game object
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "self.GAME = saveTable and saveTable.GAME or self:init_game_object()"
position = "after"
payload =  "if Talisman and Talisman.igo then self.GAME = Talisman.igo(self.GAME) end"
match_indent = true

# return eval_round value
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "add_round_eval_row({name = 'bottom', dollars = dollars})"
position = "after"
payload = "Talisman.dollars = dollars"
match_indent = true

# Scoring coroutine
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "check_for_unlock({type = 'play_all_hearts'})"
position = 'before'
payload = 'if Talisman.scoring_coroutine then return false end '
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''
G.STATE_COMPLETE = false
return true
'''
position = 'before'
payload = 'if Talisman.scoring_coroutine then return false end '
match_indent = false

# Patch save manager to do Talisman things
[[patches]]
[patches.pattern]
target = 'engine/save_manager.lua'
pattern = 'CHANNEL = love.thread.getChannel("save_request")'
position = 'after'
payload = '''
function tal_compress_and_save(_file, _data, talisman)
  local save_string = type(_data) == 'table' and STR_PACK(_data) or _data
  local fallback_save = STR_PACK({GAME = {won = true}}) --just bare minimum to not crash, maybe eventually display some info?
  if talisman == 'bignumber' then
    fallback_save = "if not BigMeta then " .. fallback_save
  elseif talisman == 'omeganum' then
    fallback_save = "if not OmegaMeta then " .. fallback_save
  else
    fallback_save = "if BigMeta or OmegaMeta then " .. fallback_save
  end
  fallback_save = fallback_save .. " end"
  save_string = fallback_save .. " " .. save_string
  save_string = love.data.compress('string', 'deflate', save_string, 1)
  love.filesystem.write(_file,save_string)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'engine/save_manager.lua'
pattern = "compress_and_save(prefix_profile..'save.jkr', request.save_table)"
position = 'at'
payload = "tal_compress_and_save(prefix_profile..'save.jkr', request.save_table, request.talisman)"
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = "type = 'save_run',"
position = 'after'
payload = 'talisman = Talisman.config_file.break_infinity,'
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
position = 'at'
match_indent = true
pattern = '''
G.ARGS.score_intensity.earned_score = G.GAME.current_round.current_hand.chips*G.GAME.current_round.current_hand.mult
'''
payload = '''
G.ARGS.score_intensity.earned_score = math.min(to_number(G.GAME.current_round.current_hand.chips*G.GAME.current_round.current_hand.mult), 1e300)
'''

[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
position = 'at'
match_indent = true
pattern = '''
G.ARGS.score_intensity.earned_score = SMODS.calculate_round_score(true)
'''
payload = '''
G.ARGS.score_intensity.earned_score = math.min(to_number(SMODS.calculate_round_score(true)), 1e300)
'''
