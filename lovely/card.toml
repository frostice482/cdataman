[manifest]
version = "1.0.0"
priority = 0

# arbitrary operations on chips and mult
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if effects.jokers.Xmult_mod then mult = mod_mult(mult*effects.jokers.Xmult_mod);extras.mult = true  end"
position = "after"
payload = '''
if effects.jokers.Emult_mod then mult = mod_mult(mult^effects.jokers.Emult_mod);extras.mult = true end
if effects.jokers.EEmult_mod then mult = mod_mult(mult:arrow(2, effects.jokers.EEmult_mod));extras.mult = true end
if effects.jokers.EEEmult_mod then mult = mod_mult(mult:arrow(3, effects.jokers.EEEmult_mod));extras.mult = true end
if effects.jokers.hypermult_mod and type(effects.jokers.hypermult_mod) == 'table' then mult = mod_mult(mult:arrow(effects.jokers.hypermult_mod[1], effects.jokers.hypermult_mod[2]));extras.mult = true end
if effects.jokers.Xchip_mod then hand_chips = mod_chips(hand_chips*effects.jokers.Xchip_mod);extras.hand_chips = true end
if effects.jokers.Echip_mod then hand_chips = mod_chips(hand_chips^effects.jokers.Echip_mod);extras.hand_chips = true end
if effects.jokers.EEchip_mod then hand_chips = mod_chips(hand_chips:arrow(2, effects.jokers.EEchip_mod));extras.hand_chips = true end
if effects.jokers.EEEchip_mod then hand_chips = mod_chips(hand_chips:arrow(3, effects.jokers.EEEchip_mod));extras.hand_chips = true end
if effects.jokers.hyperchip_mod and type(effects.jokers.hyperchip_mod) == 'table' then hand_chips = mod_chips(hand_chips:arrow(effects.jokers.hyperchip_mod[1], effects.jokers.hyperchip_mod[2]));extras.hand_chips = true end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if effect.Xmult_mod then mult = mod_mult(mult*effect.Xmult_mod);extras.mult = true  end"
position = "after"
payload = '''
if effect.Emult_mod then mult = mod_mult(mult^effect.Emult_mod);extras.mult = true end
if effect.EEmult_mod then mult = mod_mult(mult:arrow(2, effect.EEmult_mod));extras.mult = true end
if effect.EEEmult_mod then mult = mod_mult(mult:arrow(3, effect.EEEmult_mod));extras.mult = true end
if effect.hypermult_mod and type(effect.hypermult_mod) == 'table' then mult = mod_mult(mult:arrow(effect.hypermult_mod[1], effect.hypermult_mod[2]));extras.mult = true end
if effect.Xchip_mod then hand_chips = mod_chips(hand_chips*effect.Xchip_mod);extras.hand_chips = true end
if effect.Echip_mod then hand_chips = mod_chips(hand_chips^effect.Echip_mod);extras.hand_chips = true end
if effect.EEchip_mod then hand_chips = mod_chips(hand_chips:arrow(2, effect.EEchip_mod));extras.hand_chips = true end
if effect.EEEchip_mod then hand_chips = mod_chips(hand_chips:arrow(3, effect.EEEchip_mod));extras.hand_chips = true end
if effect.hyperchip_mod and type(effect.hyperchip_mod) == 'table' then hand_chips = mod_chips(hand_chips:arrow(effect.hyperchip_mod[1], effect.hyperchip_mod[2]));extras.hand_chips = true end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "x_mult = center.config.Xmult or 1,"
position = "after"
payload = '''
e_mult = center.config.Emult or 0,
ee_mult = center.config.EEmult or 0,
eee_mult = center.config.EEEmult or 0,
hyper_mult = type(center.config.Hmult) == 'table' and center.config.Hmult or {0, 0},
x_chips = center.config.Xchips or 0,
e_chips = center.config.Echips or 0,
ee_chips = center.config.EEchips or 0,
eee_chips = center.config.EEEchips or 0,
hyper_chips = type(center.config.Hchips) == 'table' and center.config.Hchips or {0, 0},
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local p_dollars = card:get_p_dollars()"
position = "before"
payload = '''
local x_chips = card:get_chip_x_bonus()
if x_chips > 0 then
	ret.x_chips = x_chips
end

local e_chips = card:get_chip_e_bonus()
if e_chips > 0 then
	ret.e_chips = e_chips
end

local ee_chips = card:get_chip_ee_bonus()
if ee_chips > 0 then
	ret.ee_chips = ee_chips
end

local eee_chips = card:get_chip_eee_bonus()
if eee_chips > 0 then
	ret.eee_chips = eee_chips
end

local hyper_chips = card:get_chip_hyper_bonus()
if type(hyper_chips) == 'table' and hyper_chips[1] > 0 and hyper_chips[2] > 0 then
	ret.hyper_chips = hyper_chips
end

local e_mult = card:get_chip_e_mult()
if e_mult > 0 then
	ret.e_mult = e_mult
end

local ee_mult = card:get_chip_ee_mult()
if ee_mult > 0 then
	ret.ee_mult = ee_mult
end

local eee_mult = card:get_chip_eee_mult()
if eee_mult > 0 then
	ret.eee_mult = eee_mult
end

local hyper_mult = card:get_chip_hyper_mult()
if type(hyper_mult) == 'table' and hyper_mult[1] > 0 and hyper_mult[2] > 0 then
	ret.hyper_mult = hyper_mult
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif eval_type == 'dollars' then"
position = "before"
payload = '''
elseif eval_type == 'x_chips' then
	sound = 'talisman_xchip'
	amt = amt
	text = 'X' .. amt
	colour = G.C.CHIPS
	config.type = 'fade'
	config.scale = 0.7
elseif eval_type == 'e_chips' then
	sound = 'talisman_echip'
	amt = amt
	text = '^' .. amt
	colour = G.C.CHIPS
	config.type = 'fade'
	config.scale = 0.7
elseif eval_type == 'ee_chips' then
	sound = 'talisman_eechip'
	amt = amt
	text = '^^' .. amt
	colour = G.C.CHIPS
	config.type = 'fade'
	config.scale = 0.7
elseif eval_type == 'eee_chips' then
	sound = 'talisman_eeechip'
	amt = amt
	text = '^^^' .. amt
	colour = G.C.CHIPS
	config.type = 'fade'
	config.scale = 0.7
elseif eval_type == 'hyper_chips' then
	sound = 'talisman_eeechip'
	text = (amt[1] > 5 and ('{' .. tostring(amt[1]) .. '}') or string.rep('^', amt[1])) .. tostring(amt[2])
	amt = amt[2]
	colour = G.C.CHIPS
	config.type = 'fade'
	config.scale = 0.7
elseif eval_type == 'e_mult' then
	sound = 'talisman_emult'
	amt = amt
	text = '^' .. amt .. ' ' .. localize('k_mult')
	colour = G.C.MULT
	config.type = 'fade'
	config.scale = 0.7
elseif eval_type == 'ee_mult' then
	sound = 'talisman_eemult'
	amt = amt
	text = '^^' .. amt .. ' ' .. localize('k_mult')
	colour = G.C.MULT
	config.type = 'fade'
	config.scale = 0.7
elseif eval_type == 'eee_mult' then
	sound = 'talisman_eeemult'
	amt = amt
	text = '^^^' .. amt .. ' ' .. localize('k_mult')
	colour = G.C.MULT
	config.type = 'fade'
	config.scale = 0.7
elseif eval_type == 'hyper_mult' then
	sound = 'talisman_eeemult'
	text = (amt[1] > 5 and ('{' .. tostring(amt[1]) .. '}') or string.rep('^', amt[1])) .. tostring(amt[2]) .. ' ' .. localize('k_mult')
	amt = amt[2]
	colour = G.C.MULT
	config.type = 'fade'
	config.scale = 0.7
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if effects[ii].message then"
position = "before"
payload = '''
if effects[ii].x_chips then
	mod_percent = true
	hand_chips = mod_chips(hand_chips*effects[ii].x_chips)
	update_hand_text({delay = 0}, {chips = hand_chips})
	card_eval_status_text(G.hand.cards[i], 'x_chips', effects[ii].x_chips, percent)
end
if effects[ii].e_chips then
	mod_percent = true
	hand_chips = mod_chips(hand_chips^effects[ii].e_chips)
	update_hand_text({delay = 0}, {chips = hand_chips})
	card_eval_status_text(G.hand.cards[i], 'e_chips', effects[ii].e_chips, percent)
end
if effects[ii].ee_chips then
	mod_percent = true
	hand_chips = mod_chips(hand_chips:arrow(2, effects[ii].ee_chips))
	update_hand_text({delay = 0}, {chips = hand_chips})
	card_eval_status_text(G.hand.cards[i], 'ee_chips', effects[ii].ee_chips, percent)
end
if effects[ii].eee_chips then
	mod_percent = true
	hand_chips = mod_chips(hand_chips:arrow(3, effects[ii].eee_chips))
	update_hand_text({delay = 0}, {chips = hand_chips})
	card_eval_status_text(G.hand.cards[i], 'eee_chips', effects[ii].eee_chips, percent)
end
if effects[ii].hyper_chips and type(effects[ii].hyper_chips) == 'table' then
	mod_percent = true
	hand_chips = mod_chips(hand_chips:arrow(effects[ii].hyper_chips[1], effects[ii].hyper_chips[2]))
	update_hand_text({delay = 0}, {chips = hand_chips})
	card_eval_status_text(G.hand.cards[i], 'hyper_chips', effects[ii].hyper_chips, percent)
end
if effects[ii].e_mult then
	mod_percent = true
	mult = mod_mult(mult^effects[ii].e_mult)
	update_hand_text({delay = 0}, {mult = mult})
	card_eval_status_text(G.hand.cards[i], 'e_mult', effects[ii].e_mult, percent)
end
if effects[ii].ee_mult then
	mod_percent = true
	mult = mod_mult(mult:arrow(2, effects[ii].ee_mult))
	update_hand_text({delay = 0}, {mult = mult})
	card_eval_status_text(G.hand.cards[i], 'ee_mult', effects[ii].ee_mult, percent)
end
if effects[ii].eee_mult then
	mod_percent = true
	mult = mod_mult(mult:arrow(3, effects[ii].eee_mult))
	update_hand_text({delay = 0}, {mult = mult})
	card_eval_status_text(G.hand.cards[i], 'eee_mult', effects[ii].eee_mult, percent)
end
if effects[ii].hyper_mult and type(effects[ii].hyper_mult) == 'table' then
	mod_percent = true
	mult = mod_mult(mult:arrow(effects[ii].hyper_mult[1], effects[ii].hyper_mult[2]))
	update_hand_text({delay = 0}, {mult = mult})
	card_eval_status_text(G.hand.cards[i], 'hyper_mult', effects[ii].hyper_mult, percent)
end

'''
match_indent = true

# sfx
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "sound = extra.edition and 'foil2' or extra.mult_mod and 'multhit1' or extra.Xmult_mod and 'multhit2' or 'generic1'"
position = "at"
payload = '''sound = extra.edition and 'foil2' or extra.mult_mod and 'multhit1' or extra.Xmult_mod and 'multhit2' or extra.Xchip_mod and 'talisman_xchip' or extra.Echip_mod and 'talisman_echip' or extra.Emult_mod and 'talisman_emult' or extra.EEchip_mod and 'talisman_eechip' or extra.EEmult_mod and 'talisman_eemult' or (extra.EEEchip_mod or extra.hyperchip_mod) and 'talisman_eeechip' or (extra.EEEmult_mod or extra.hypermult_mod) and 'talisman_eeemult' or 'generic1'
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "--calculate the card edition effects"
position = "before"
payload = '''
if effects[ii].x_chips then
	mod_percent = true
	if effects[ii].card then juice_card(effects[ii].card) end
	hand_chips = mod_chips(hand_chips*effects[ii].x_chips)
	update_hand_text({delay = 0}, {chips = hand_chips})
	card_eval_status_text(scoring_hand[i], 'x_chips', effects[ii].x_chips, percent)
end
if effects[ii].e_chips then
	mod_percent = true
	if effects[ii].card then juice_card(effects[ii].card) end
	hand_chips = mod_chips(hand_chips^effects[ii].e_chips)
	update_hand_text({delay = 0}, {chips = hand_chips})
	card_eval_status_text(scoring_hand[i], 'e_chips', effects[ii].e_chips, percent)
end
if effects[ii].ee_chips then
	mod_percent = true
	if effects[ii].card then juice_card(effects[ii].card) end
	hand_chips = mod_chips(hand_chips:arrow(2, effects[ii].ee_chips))
	update_hand_text({delay = 0}, {chips = hand_chips})
	card_eval_status_text(scoring_hand[i], 'ee_chips', effects[ii].ee_chips, percent)
end
if effects[ii].eee_chips then
	mod_percent = true
	if effects[ii].card then juice_card(effects[ii].card) end
	hand_chips = mod_chips(hand_chips:arrow(3, effects[ii].eee_chips))
	update_hand_text({delay = 0}, {chips = hand_chips})
	card_eval_status_text(scoring_hand[i], 'eee_chips', effects[ii].eee_chips, percent)
end
if effects[ii].hyper_chips and type(effects[ii].hyper_chips) == 'table' then
	mod_percent = true
	if effects[ii].card then juice_card(effects[ii].card) end
	hand_chips = mod_chips(hand_chips:arrow(effects[ii].hyper_chips[1], effects[ii].hyper_chips[2]))
	update_hand_text({delay = 0}, {chips = hand_chips})
	card_eval_status_text(scoring_hand[i], 'hyper_chips', effects[ii].hyper_chips, percent)
end
if effects[ii].e_mult then
	mod_percent = true
	if effects[ii].card then juice_card(effects[ii].card) end
	mult = mod_mult(mult^effects[ii].e_mult)
	update_hand_text({delay = 0}, {mult = mult})
	card_eval_status_text(scoring_hand[i], 'e_mult', effects[ii].e_mult, percent)
end
if effects[ii].ee_mult then
	mod_percent = true
	if effects[ii].card then juice_card(effects[ii].card) end
	mult = mod_mult(mult:arrow(2, effects[ii].ee_mult))
	update_hand_text({delay = 0}, {mult = mult})
	card_eval_status_text(scoring_hand[i], 'ee_mult', effects[ii].ee_mult, percent)
end
if effects[ii].eee_mult then
	mod_percent = true
	if effects[ii].card then juice_card(effects[ii].card) end
	mult = mod_mult(mult:arrow(3, effects[ii].eee_mult))
	update_hand_text({delay = 0}, {mult = mult})
	card_eval_status_text(scoring_hand[i], 'eee_mult', effects[ii].eee_mult, percent)
end
if effects[ii].hyper_mult and type(effects[ii].hyper_mult) == 'table' then
	mod_percent = true
	if effects[ii].card then juice_card(effects[ii].card) end
	mult = mod_mult(mult:arrow(effects[ii].hyper_mult[1], effects[ii].hyper_mult[2]))
	update_hand_text({delay = 0}, {mult = mult})
	card_eval_status_text(scoring_hand[i], 'hyper_mult', effects[ii].hyper_mult, percent)
end

'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = 'if effects[ii].edition.p_dollars_mod then'
position = 'before'
match_indent = true
payload = '''
if scoring_hand and scoring_hand[i] and scoring_hand[i].edition then
	local trg = scoring_hand[i]
	local edi = trg.edition
	if edi.x_chips then
		hand_chips = mod_chips(hand_chips * edi.x_chips)
		update_hand_text({delay = 0}, {chips = hand_chips})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = 'X'.. edi.x_chips ,
		edition = true,
		x_chips = true})
	end
	if edi.e_chips then
		hand_chips = mod_chips(hand_chips ^ edi.e_chips)
		update_hand_text({delay = 0}, {chips = hand_chips})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = '^'.. edi.e_chips ,
		edition = true,
		e_chips = true})
	end
	if edi.ee_chips then
		hand_chips = mod_chips(hand_chips:arrow(2, edi.ee_chips))
		update_hand_text({delay = 0}, {chips = hand_chips})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = '^^'.. edi.ee_chips ,
		edition = true,
		ee_chips = true})
	end
	if edi.eee_chips then
		hand_chips = mod_chips(hand_chips:arrow(3, edi.eee_chips))
		update_hand_text({delay = 0}, {chips = hand_chips})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = '^^^'.. edi.eee_chips ,
		edition = true,
		eee_chips = true})
	end
	if edi.hyper_chips and type(edi.hyper_chips) == 'table' then
		hand_chips = mod_chips(hand_chips:arrow(edi.hyper_chips[1], edi.hyper_chips[2]))
		update_hand_text({delay = 0}, {chips = hand_chips})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = (edi.hyper_chips[1] > 5 and ('{' .. edi.hyper_chips[1] .. '}') or string.rep('^', edi.hyper_chips[1])) .. edi.hyper_chips[2] ,
		edition = true,
		eee_chips = true})
	end
	if edi.e_mult then
		mult = mod_mult(mult ^ edi.e_mult)
		update_hand_text({delay = 0}, {mult = mult})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = '^'.. edi.e_mult ..' ' .. localize('k_mult'),
		edition = true,
		e_mult = true})
	end
	if edi.ee_mult then
		mult = mod_mult(mult:arrow(2, edi.ee_mult))
		update_hand_text({delay = 0}, {mult = mult})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = '^^'.. edi.ee_mult ..' ' .. localize('k_mult'),
		edition = true,
		ee_mult = true})
	end
	if edi.eee_mult then
		mult = mod_mult(mult:arrow(3, edi.eee_mult))
		update_hand_text({delay = 0}, {mult = mult})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = '^^^'.. edi.eee_mult ..' ' .. localize('k_mult'),
		edition = true,
		eee_mult = true})
	end
	if edi.hyper_mult and type(edi.hyper_mult) == 'table' then
		mult = mod_mult(mult:arrow(edi.hyper_mult[1], edi.hyper_mult[2]))
		update_hand_text({delay = 0}, {mult = mult})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = (edi.hyper_mult[1] > 5 and ('{' .. edi.hyper_mult[1] .. '}') or string.rep('^', edi.hyper_mult[1])) .. edi.hyper_mult[2] ..' ' .. localize('k_mult'),
		edition = true,
		hyper_mult = true})
	end
end
'''
