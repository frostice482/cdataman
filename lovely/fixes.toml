[manifest]
version = "1.0.0"
priority = 0

# For some reason Big leaks into the text engine, this mitigates it
[[patches]]
[patches.regex]
target = "engine/text.lua"
pattern = '''(?<indent>[\t ]*)if self\.strings\[k\]\.W > self\.config\.W then'''
position = "before"
line_prepend = "$indent"
payload = '''
if Big then
	self.strings[k].W = to_number(self.strings[k].W)
	self.strings[k].H = to_number(self.strings[k].H)
end
'''

[[patches]]
[patches.pattern]
target = "engine/text.lua"
pattern = "function DynaText:draw()"
position = "after"
payload = '''
if Big then
	self.scale = to_number(self.scale)
	if self.shadow_parallax then self.shadow_parallax.x = to_number(self.shadow_parallax.x) end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "engine/text.lua"
pattern = "for k, letter in ipairs(self.strings[self.focused_string].letters) do"
position = "after" # old DynaText backward compat
payload = '''
if Big then
	letter.dims.x = to_number(letter.dims.x)
	letter.dims.y = to_number(letter.dims.y)
	letter.offset.x = to_number(letter.offset.x)
	letter.offset.y = to_number(letter.offset.y)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "engine/text.lua"
pattern = "local letter = self.strings[self.focused_string].letters[k]"
position = "after" # This is for Aiko's new mod menu interference with DynaText
payload = '''
if Big then
	letter.dims.x = to_number(letter.dims.x)
	letter.dims.y = to_number(letter.dims.y)
	letter.offset.x = to_number(letter.offset.x)
	letter.offset.y = to_number(letter.offset.y)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "engine/ui.lua"
pattern = "if _th and _tw then"
position = "after"
payload = '''
if Big then
	_th = to_number(_th)
	_tw = to_number(_tw)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "engine/ui.lua"
pattern = "local _cw, _ch = w:set_wh()"
position = "after"
payload = "if Big and G.STATE == G.STATES.MENU then _cw = to_number(_cw); _ch = to_number(_ch) end"
match_indent = true

[[patches]]
[patches.pattern]
target = "engine/moveable.lua"
pattern = "function Moveable:move_wh(dt)"
position = "after"
payload = '''
if Big and G.STATE == G.STATES.MENU then self.T.w = to_number(self.T.w)
self.T.h = to_number(self.T.h)
self.VT.w = to_number(self.VT.w)
self.VT.h = to_number(self.VT.h) end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = "function prep_draw(moveable, scale, rotate, offset)"
position = "after"
payload = '''
if Big and G.STATE == G.STATES.MENU then moveable.VT.x = to_number(moveable.VT.x)
moveable.VT.y = to_number(moveable.VT.y)
moveable.VT.w = to_number(moveable.VT.w)
moveable.VT.h = to_number(moveable.VT.h) end
'''
match_indent = true

# my fix for this one is really scuffed
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = 'if edition_effects.jokers.x_mult_mod then'
position = 'before'
match_indent = true
payload = '''
if edition_effects.jokers.x_mult_mod then
	mult = mod_mult(mult*edition_effects.jokers.x_mult_mod)
	update_hand_text({delay = 0}, {mult = mult})
	card_eval_status_text(_card, 'jokers', nil, percent, nil, {
		message = localize{type='variable',key='a_xmult',vars={edition_effects.jokers.x_mult_mod}},
		x_mult_mod =  edition_effects.jokers.x_mult_mod,
		colour =  G.C.EDITION,
		edition = true})
end
if G.jokers.cards and G.jokers.cards[i] and G.jokers.cards[i].edition then
	local trg = G.jokers.cards[i]
	local edi = trg.edition
	if edi.x_chips then
		hand_chips = mod_chips(hand_chips * edi.x_chips)
		update_hand_text({delay = 0}, {chips = hand_chips})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = 'X'.. edi.x_chips ,
		edition = true,
		x_chips = true})
	end
	if edi.e_chips then
		hand_chips = mod_chips(hand_chips ^ edi.e_chips)
		update_hand_text({delay = 0}, {chips = hand_chips})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = '^'.. edi.e_chips ,
		edition = true,
		e_chips = true})
	end
	if edi.ee_chips then
		hand_chips = mod_chips(hand_chips:arrow(2, edi.ee_chips))
		update_hand_text({delay = 0}, {chips = hand_chips})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = '^^'.. edi.ee_chips ,
		edition = true,
		ee_chips = true})
	end
	if edi.eee_chips then
		hand_chips = mod_chips(hand_chips:arrow(3, edi.eee_chips))
		update_hand_text({delay = 0}, {chips = hand_chips})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = '^^^'.. edi.eee_chips ,
		edition = true,
		eee_chips = true})
	end
	if edi.hyper_chips and type(edi.hyper_chips) == 'table' then
		hand_chips = mod_chips(hand_chips:arrow(edi.hyper_chips[1], edi.hyper_chips[2]))
		update_hand_text({delay = 0}, {chips = hand_chips})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = (edi.hyper_chips[1] > 5 and ('{' .. edi.hyper_chips[1] .. '}') or string.rep('^', edi.hyper_chips[1])) .. edi.hyper_chips[2] ,
		edition = true,
		eee_chips = true})
	end
	if edi.e_mult then
		mult = mod_mult(mult ^ edi.e_mult)
		update_hand_text({delay = 0}, {mult = mult})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = '^'.. edi.e_mult ..' ' .. localize('k_mult'),
		edition = true,
		e_mult = true})
	end
	if edi.ee_mult then
		mult = mod_mult(mult:arrow(2, edi.ee_mult))
		update_hand_text({delay = 0}, {mult = mult})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = '^^'.. edi.ee_mult ..' ' .. localize('k_mult'),
		edition = true,
		ee_mult = true})
	end
	if edi.eee_mult then
		mult = mod_mult(mult:arrow(3, edi.eee_mult))
		update_hand_text({delay = 0}, {mult = mult})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = '^^^'.. edi.eee_mult ..' ' .. localize('k_mult'),
		edition = true,
		eee_mult = true})
	end
	if edi.hyper_mult and type(edi.hyper_mult) == 'table' then
		mult = mod_mult(mult:arrow(edi.hyper_mult[1], edi.hyper_mult[2]))
		update_hand_text({delay = 0}, {mult = mult})
		card_eval_status_text(trg, 'extra', nil, percent, nil,
		{message = (edi.hyper_mult[1] > 5 and ('{' .. edi.hyper_mult[1] .. '}') or string.rep('^', edi.hyper_mult[1])) .. edi.hyper_mult[2] ..' ' .. localize('k_mult'),
		edition = true,
		hyper_mult = true})
	end
end
edition_effects.jokers.x_mult_mod = nil
'''

# naneinf crash fixes
[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = "if G.GAME.round_scores[score] and math.floor(amt) > G.GAME.round_scores[score].amt then"
position = "at"
payload = '''
if G.GAME.round_scores[score] and math.floor(amt) > (G.GAME.round_scores[score].amt or 0) then'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = "function Game:update_hand_played(dt)"
position = "after"
payload = '''
G.GAME.chips = (G.GAME.chips or 0)
G.GAME.blind.chips = (G.GAME.blind.chips or math.huge)'''
match_indent = true
# Naneinf crash fixes end

# Don't crash in vanilla with big numbers in UI
[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = "assembled_string = assembled_string..(type(subpart) == 'string' and subpart or args.vars[tonumber(subpart[1])] or 'ERROR')"
position = 'before'
payload = '''
if not SMODS and type(subpart) ~= 'string' then
	if type(args.vars[tonumber(subpart[ 1 ])]) ~= 'number' then
		args.vars[tonumber(subpart[ 1 ])] = tostring(args.vars[tonumber(subpart[ 1 ])])
	else
		args.vars[tonumber(subpart[ 1 ])] = number_format(args.vars[tonumber(subpart[ 1 ])], 1000000)
	end
end
'''
match_indent = false

# Let shaders not use bignums
[[patches]]
[patches.pattern]
target = 'engine/sprite.lua'
pattern = "G.SHADERS[_shader]:send(v.name, v.val or (v.func and v.func()) or v.ref_table[v.ref_value])"
position = 'at'
payload = '''local val = v.val or (v.func and v.func()) or v.ref_table[v.ref_value]
if is_big(val) then
	if val > BigC.BIG then
		val = 1e300
	else
		val = val:tonumber()
	end
end
G.SHADERS[_shader]:send(v.name, val)'''
match_indent = true

# Let ambient sounds not use bignums
[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = "AC[k].vol = (not G.video_organ and G.STATE == G.STATES.SPLASH) and 0 or AC[k].vol and v.volfunc(AC[k].vol) or 0"
position = 'after'
payload = '''
if is_big(AC[k].vol) then
	if AC[k].vol > BigC.BIG then
		AC[k].vol = 1e300
	else
		AC[k].vol = to_number(AC[k].vol)
	end
end
if is_big(AC[k].per) then
	if AC[k].per > BigC.BIG then
		AC[k].per = 1e300
	else
		AC[k].per = to_number(AC[k].per)
	end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = "_F.intensity = ((G.pack_cards and not G.pack_cards.REMOVED) or (G.TAROT_INTERRUPT)) and 0 or math.max(0., math.log(G.ARGS.score_intensity.earned_score, 5)-2)"
position = 'after'
payload = '''if is_big(_F.intensity) then
	if _F.intensity > BigC.BIG then
		_F.intensity = 1e300
	else
		_F.intensity = to_number(_F.intensity)
	end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = 'if v.is and v:is(Object) then ret_t[k] = [["]].."MANUAL_REPLACE"..[["]]'
position = 'at'
payload = '''
if Big and Big.is(v) then ret_t[k] = v:as_table()
elseif v.is and v:is(Object) then ret_t[k] = [["]].."MANUAL_REPLACE"..[["]]
'''
match_indent = true